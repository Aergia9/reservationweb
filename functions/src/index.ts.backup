import {setGlobalOptions} from "firebase-functions";
import {onRequest} from "firebase-functions/https";
import * as logger from "firebase-functions/logger";
import * as admin from "firebase-admin";

// Initialize Firebase Admin SDK
admin.initializeApp();
const db = admin.firestore();

// User session tracking for first-time users
const userSessions = new Map<string, { isFirstMessage: boolean; lastInteraction: number }>();

// Check if user is new or returning
function isFirstTimeUser(phoneNumber: string): boolean {
  const session = userSessions.get(phoneNumber);
  const now = Date.now();
  
  if (!session || (now - session.lastInteraction) > 24 * 60 * 60 * 1000) { // 24 hours
    userSessions.set(phoneNumber, { isFirstMessage: true, lastInteraction: now });
    return true;
  }
  
  userSessions.set(phoneNumber, { isFirstMessage: false, lastInteraction: now });
  return false;
}

// For cost control, set maximum number of containers
setGlobalOptions({ maxInstances: 10 });

// WhatsApp webhook for customer service automation
export const whatsappWebhook = onRequest(async (request, response) => {
  try {
    logger.info("WhatsApp webhook received", {
      method: request.method,
      body: request.body,
      query: request.query,
    });

    // Handle webhook verification (required by WhatsApp)
    if (request.method === "GET") {
      const mode = request.query["hub.mode"];
      const token = request.query["hub.verify_token"];
      const challenge = request.query["hub.challenge"];

      logger.info("Webhook verification attempt", {
        mode,
        token,
        challenge,
        expectedToken: process.env.WHATSAPP_VERIFY_TOKEN
      });

      // Verify token (set your verify token in environment config)
      const VERIFY_TOKEN = process.env.WHATSAPP_VERIFY_TOKEN || "WhatsApp9Kx7mN2vE8qR5wZ3uC6pL4tY";
      
      if (mode === "subscribe" && token === VERIFY_TOKEN) {
        logger.info("Webhook verified successfully");
        response.status(200).send(challenge);
        return;
      } else {
        logger.error("Webhook verification failed", {
          receivedMode: mode,
          receivedToken: token,
          expectedToken: VERIFY_TOKEN
        });
        response.status(403).send("Forbidden");
        return;
      }
    }

    // Handle incoming messages
    if (request.method === "POST") {
      const body = request.body;

      if (body.object === "whatsapp_business_account") {
        // Process each entry
        for (const entry of body.entry) {
          for (const change of entry.changes) {
            if (change.field === "messages") {
              await processWhatsAppMessage(change.value);
            }
          }
        }
        
        response.status(200).send("EVENT_RECEIVED");
        return;
      }
    }

    response.status(404).send("Not Found");
  } catch (error) {
    logger.error("Error in WhatsApp webhook", error);
    response.status(500).send("Internal Server Error");
  }
});

// Process incoming WhatsApp messages
async function processWhatsAppMessage(messageData: any) {
  try {
    logger.info("Processing WhatsApp message", messageData);

    if (!messageData.messages) {
      return; // No messages to process
    }

    for (const message of messageData.messages) {
      const phoneNumber = message.from;
      const messageText = message.text?.body?.toLowerCase().trim();
      const messageType = message.type;

      logger.info("Message details", {
        from: phoneNumber,
        type: messageType,
        text: messageText,
      });

      // Only process text messages
      if (messageType !== "text" || !messageText) {
        await sendWhatsAppMessage(phoneNumber, 
          "Hello! I can help you with booking inquiries. Please send me text messages. üòä\n\n" +
          "Reply with:\n" +
          "1Ô∏è‚É£ Check booking status\n" +
          "2Ô∏è‚É£ View current events\n" +
          "3Ô∏è‚É£ Payment help\n" +
          "4Ô∏è‚É£ Event services\n" +
          "Or just type 'menu' anytime!");
        continue;
      }

      // Check if it's the first message from this user
      if (isFirstTimeUser(phoneNumber)) {
        await sendWelcomeMenu(phoneNumber);
        continue;
      }

      // Handle menu selections
      if (messageText === "1" || messageText.includes("check booking")) {
        await sendBookingHelp(phoneNumber);
      } else if (messageText === "2" || messageText.includes("current events") || messageText.includes("view events")) {
        await sendCurrentEvents(phoneNumber);
      } else if (messageText === "3" || messageText.includes("payment")) {
        await sendPaymentHelp(phoneNumber);
      } else if (messageText === "4" || messageText.includes("event services")) {
        await sendEventInfo(phoneNumber);
      } else if (messageText === "menu" || messageText === "main menu" || messageText.includes("menu")) {
        await sendWelcomeMenu(phoneNumber);
      } else if (messageText.includes("help") || messageText.includes("bantuan")) {
        await sendWelcomeMenu(phoneNumber);
      } else if (messageText === "hi" || messageText === "hello" || messageText === "halo") {
        await sendWelcomeMenu(phoneNumber);
      } else {
        // Check if message contains a booking ID pattern (assuming format like "BK-XXXXXX")
        const bookingIdMatch = messageText.match(/\b[a-zA-Z]{2}-\w{6}\b/);
        
        if (bookingIdMatch) {
          const bookingId = bookingIdMatch[0].toUpperCase();
          await handleBookingInquiry(phoneNumber, bookingId);
        } else {
          // Default response with menu
          await sendWhatsAppMessage(phoneNumber, 
            `I didn't quite understand that. Let me help you! üòä\n\n` +
            `Reply with:\n` +
            `1Ô∏è‚É£ Check booking status\n` +
            `2Ô∏è‚É£ View current events\n` +
            `3Ô∏è‚É£ Payment help\n` +
            `4Ô∏è‚É£ Event services\n\n` +
            `üí° Tip: You can also send your booking ID directly (e.g., BK-ABC123)`);
        }
      }
    }
  } catch (error) {
    logger.error("Error processing WhatsApp message", error);
  }
}

// Send welcome menu for first-time or menu requests
async function sendWelcomeMenu(phoneNumber: string) {
  const message = `üëã *Welcome to Makassar Phinisi Sea Side Hotel!*

ü§ñ Hi! I'm your digital assistant, here to help 24/7.

*What do you need help with?*

1Ô∏è‚É£ *Check booking status*
   Send me your booking ID

2Ô∏è‚É£ *View current events*  
   See our available event packages

3Ô∏è‚É£ *Payment help*
   Payment process & assistance

4Ô∏è‚É£ *Event services*
   Learn about our event offerings

üí° *Quick Tips:*
‚Ä¢ Just reply with a number (1, 2, 3, or 4)
‚Ä¢ Send your booking ID anytime (e.g., BK-ABC123)
‚Ä¢ Type "menu" to see this again

What can I help you with today? üòä`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Handle booking inquiry with booking ID
async function handleBookingInquiry(phoneNumber: string, bookingId: string) {
  try {
    // Search for booking in Firestore
    const bookingsRef = db.collection("bookings");
    const querySnapshot = await bookingsRef.where("bookingId", "==", bookingId).get();

    if (querySnapshot.empty) {
      await sendWhatsAppMessage(phoneNumber, 
        `‚ùå Sorry, I couldn't find a booking with ID: ${bookingId}

Please check your booking ID and try again. The format should be like: BK-ABC123

If you need help, you can:
‚Ä¢ Check your email confirmation
‚Ä¢ Contact our customer service
‚Ä¢ Reply "menu" for more assistance`);
      return;
    }

    // Get booking data
    const bookingDoc = querySnapshot.docs[0];
    const booking = bookingDoc.data();

    // Format booking information
    const status = booking.paymentStatus === "approved" ? "‚úÖ Confirmed" : "‚è≥ Pending Payment Approval";
    const message = `üìã *Booking Information*

*Booking ID:* ${booking.bookingId}
*Event:* ${booking.eventName}
*Customer:* ${booking.customerName}
*Date:* ${new Date(booking.bookingDate).toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })}
*Time:* ${booking.bookingTime || 'TBD'}
*Guests:* ${booking.totalGuests} people
*Total:* Rp${booking.totalPrice?.toLocaleString() || 'N/A'}
*Status:* ${status}

${booking.paymentStatus === "approved" 
  ? "üéâ Your booking is confirmed! We look forward to hosting your event." 
  : "üìÑ Your payment proof is being reviewed by our admin team. You'll receive an email confirmation once approved."}

Reply "menu" for more assistance options.`;

    await sendWhatsAppMessage(phoneNumber, message);

    // Log the inquiry for analytics
    await db.collection("whatsapp_inquiries").add({
      phoneNumber,
      bookingId,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      type: "booking_inquiry"
    });

  } catch (error) {
    logger.error("Error handling booking inquiry", error);
    await sendWhatsAppMessage(phoneNumber, 
      "‚ùå Sorry, there was an error retrieving your booking information. Please try again later or contact our customer service.");
  }
}

// Send current events happening now
async function sendCurrentEvents(phoneNumber: string) {
  try {
    // Get current events from Firestore
    const eventsRef = db.collection("event");
    const querySnapshot = await eventsRef.orderBy("createdAt", "desc").limit(5).get();

    if (querySnapshot.empty) {
      await sendWhatsAppMessage(phoneNumber, 
        `üé™ *Current Events*

Sorry, there are no events currently scheduled.

However, we offer these services:
‚Ä¢ üè¢ Corporate meetings & conferences
‚Ä¢ üíç Wedding celebrations  
‚Ä¢ üéâ Birthday parties & celebrations
‚Ä¢ üçΩÔ∏è Catering services
‚Ä¢ üì∏ Professional event photography

Contact us to plan your custom event! ‚ú®

Reply "menu" for more options.`);
      return;
    }

    let eventsMessage = `üé™ *Current Events Available*\n\n`;
    
    const events = querySnapshot.docs;
    events.forEach((doc, index) => {
      const event = doc.data();
      eventsMessage += `${index + 1}. *${event.name}*\n`;
      eventsMessage += `   üí∞ Price: Rp${Number(event.price).toLocaleString()}\n`;
      eventsMessage += `   ‚è∞ Duration: ${event.duration}\n`;
      eventsMessage += `   üë• Min. Guests: ${event.minGuests} people\n`;
      if (event.description) {
        eventsMessage += `   üìù ${event.description.substring(0, 80)}${event.description.length > 80 ? '...' : ''}\n`;
      }
      eventsMessage += `\n`;
    });

    eventsMessage += `üìû To book any event, visit our website or contact us!\n`;
    eventsMessage += `üí¨ Send your booking ID for existing reservations.\n`;
    eventsMessage += `üìã Reply "menu" for more assistance options.`;

    await sendWhatsAppMessage(phoneNumber, eventsMessage);

  } catch (error) {
    logger.error("Error getting current events", error);
    await sendWhatsAppMessage(phoneNumber, 
      "‚ùå Sorry, there was an error retrieving current events. Please try again later or contact our customer service.");
  }
}

// Send booking help information
async function sendBookingHelp(phoneNumber: string) {
  const message = `üìã *Booking Information*

To check your booking status:
‚Ä¢ Send me your booking ID (format: BK-ABC123)
‚Ä¢ You can find your booking ID in your email confirmation

For new bookings:
‚Ä¢ Visit our website to make a reservation
‚Ä¢ Choose your event/room type
‚Ä¢ Complete payment process
‚Ä¢ You'll receive a booking confirmation email

Need immediate assistance? Contact our customer service team.

Send your booking ID to get detailed information! üìû

Reply "menu" for more options.`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send payment help information
async function sendPaymentHelp(phoneNumber: string) {
  const message = `üí≥ *Payment Information*

Payment Process:
1. Complete your booking on our website
2. Upload your payment proof
3. Our admin reviews your payment (usually within 24 hours)
4. You'll receive email confirmation once approved

Payment Status Check:
‚Ä¢ Send me your booking ID to check payment status
‚Ä¢ Check your email for confirmation updates

Payment Methods:
‚Ä¢ Bank transfer
‚Ä¢ Other methods as specified during booking

Questions about payment? Send your booking ID or contact customer service! üí∞

Reply "menu" for more options.`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send event information
async function sendEventInfo(phoneNumber: string) {
  const message = `üéâ *Event Services at Makassar Phinisi Sea Side Hotel*

We offer comprehensive event planning services:

üè¢ *Corporate Events*
‚Ä¢ Business meetings & conferences
‚Ä¢ Product launches & presentations
‚Ä¢ Team building activities
‚Ä¢ Corporate dinners

üíç *Wedding & Celebrations*
‚Ä¢ Wedding receptions
‚Ä¢ Anniversary celebrations
‚Ä¢ Engagement parties
‚Ä¢ Cultural ceremonies

üéä *Special Occasions*
‚Ä¢ Birthday parties
‚Ä¢ Graduation celebrations
‚Ä¢ Family reunions
‚Ä¢ Holiday events

‚ú® *Premium Features*
‚Ä¢ Professional event planning
‚Ä¢ Catering & menu customization
‚Ä¢ Audio/visual equipment
‚Ä¢ Photography services
‚Ä¢ Scenic waterfront venue
‚Ä¢ Indoor & outdoor options

üìã *How to Book*
1. Visit our website for detailed packages
2. Choose your event type & date
3. Customize your requirements
4. Complete booking & payment

üì± *Quick Commands*
‚Ä¢ Reply "2" to see current event packages
‚Ä¢ Send your booking ID to check status
‚Ä¢ Reply "menu" for more assistance

Ready to create unforgettable memories? Contact us today! üåü`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send WhatsApp message via WhatsApp Business API
async function sendWhatsAppMessage(phoneNumber: string, message: string) {
  try {
    const WHATSAPP_TOKEN = process.env.WHATSAPP_ACCESS_TOKEN;
    const PHONE_NUMBER_ID = process.env.WHATSAPP_PHONE_NUMBER_ID;

    if (!WHATSAPP_TOKEN || !PHONE_NUMBER_ID) {
      logger.error("WhatsApp credentials not configured");
      return;
    }

    const url = `https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`;
    
    const payload = {
      messaging_product: "whatsapp",
      to: phoneNumber,
      type: "text",
      text: {
        body: message
      }
    };

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${WHATSAPP_TOKEN}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error("Failed to send WhatsApp message", {
        status: response.status,
        error: errorText,
      });
    } else {
      logger.info("WhatsApp message sent successfully", {
        to: phoneNumber,
        messageLength: message.length,
      });
    }
  } catch (error) {
    logger.error("Error sending WhatsApp message", error);
  }
}

// Handle booking inquiry with booking ID
async function handleBookingInquiry(phoneNumber: string, bookingId: string) {
  try {
    // Search for booking in Firestore
    const bookingsRef = db.collection("bookings");
    const querySnapshot = await bookingsRef.where("bookingId", "==", bookingId).get();

    if (querySnapshot.empty) {
      await sendWhatsAppMessage(phoneNumber, 
        `‚ùå Sorry, I couldn't find a booking with ID: ${bookingId}

Please check your booking ID and try again. The format should be like: BK-ABC123

If you need help, you can:
‚Ä¢ Check your email confirmation
‚Ä¢ Contact our customer service
‚Ä¢ Send "help" for more assistance`);
      return;
    }

    // Get booking data
    const bookingDoc = querySnapshot.docs[0];
    const booking = bookingDoc.data();

    // Format booking information
    const status = booking.paymentStatus === "approved" ? "‚úÖ Confirmed" : "‚è≥ Pending Payment Approval";
    const message = `üìã *Booking Information*

*Booking ID:* ${booking.bookingId}
*Event:* ${booking.eventName}
*Customer:* ${booking.customerName}
*Date:* ${new Date(booking.bookingDate).toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })}
*Time:* ${booking.bookingTime || 'TBD'}
*Guests:* ${booking.totalGuests} people
*Total:* Rp${booking.totalPrice?.toLocaleString() || 'N/A'}
*Status:* ${status}

${booking.paymentStatus === "approved" 
  ? "üéâ Your booking is confirmed! We look forward to hosting your event." 
  : "üìÑ Your payment proof is being reviewed by our admin team. You'll receive an email confirmation once approved."}

Need more help? Send "help" for assistance options.`;

    await sendWhatsAppMessage(phoneNumber, message);

    // Log the inquiry for analytics
    await db.collection("whatsapp_inquiries").add({
      phoneNumber,
      bookingId,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      type: "booking_inquiry"
    });

  } catch (error) {
    logger.error("Error handling booking inquiry", error);
    await sendWhatsAppMessage(phoneNumber, 
      "‚ùå Sorry, there was an error retrieving your booking information. Please try again later or contact our customer service.");
  }
}

// Send welcome menu for first-time or menu requests
async function sendWelcomeMenu(phoneNumber: string) {
  const message = `üëã *Welcome to Makassar Phinisi Sea Side Hotel!*

ü§ñ Hi! I'm your digital assistant, here to help 24/7.

*What do you need help with?*

1Ô∏è‚É£ *Check booking status*
   Send me your booking ID

2Ô∏è‚É£ *View current events*  
   See our available event packages

3Ô∏è‚É£ *Payment help*
   Payment process & assistance

4Ô∏è‚É£ *Event services*
   Learn about our event offerings

üí° *Quick Tips:*
‚Ä¢ Just reply with a number (1, 2, 3, or 4)
‚Ä¢ Send your booking ID anytime (e.g., BK-ABC123)
‚Ä¢ Type "menu" to see this again

What can I help you with today? üòä`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send booking help information
async function sendBookingHelp(phoneNumber: string) {
  const message = `üìã *Booking Information*

To check your booking status:
‚Ä¢ Send me your booking ID (format: BK-ABC123)
‚Ä¢ You can find your booking ID in your email confirmation

For new bookings:
‚Ä¢ Visit our website to make a reservation
‚Ä¢ Choose your event/room type
‚Ä¢ Complete payment process
‚Ä¢ You'll receive a booking confirmation email

Need immediate assistance? Contact our customer service team.

Send your booking ID to get detailed information! üìû`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send payment help information
async function sendPaymentHelp(phoneNumber: string) {
  const message = `üí≥ *Payment Information*

Payment Process:
1. Complete your booking on our website
2. Upload your payment proof
3. Our admin reviews your payment (usually within 24 hours)
4. You'll receive email confirmation once approved

Payment Status Check:
‚Ä¢ Send me your booking ID to check payment status
‚Ä¢ Check your email for confirmation updates

Payment Methods:
‚Ä¢ Bank transfer
‚Ä¢ Other methods as specified during booking

Questions about payment? Send your booking ID or contact customer service! üí∞`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send current events happening now
async function sendCurrentEvents(phoneNumber: string) {
  try {
    // Get current events from Firestore
    const eventsRef = db.collection("event");
    const querySnapshot = await eventsRef.orderBy("createdAt", "desc").limit(5).get();

    if (querySnapshot.empty) {
      await sendWhatsAppMessage(phoneNumber, 
        `üé™ *Current Events*

Sorry, there are no events currently scheduled.

However, we offer these services:
‚Ä¢ üè¢ Corporate meetings & conferences
‚Ä¢ üíç Wedding celebrations  
‚Ä¢ üéâ Birthday parties & celebrations
‚Ä¢ üçΩÔ∏è Catering services
‚Ä¢ üì∏ Professional event photography

Contact us to plan your custom event! ‚ú®`);
      return;
    }

    let eventsMessage = `üé™ *Current Events Available*\n\n`;
    
    const events = querySnapshot.docs;
    events.forEach((doc, index) => {
      const event = doc.data();
      eventsMessage += `${index + 1}. *${event.name}*\n`;
      eventsMessage += `   üí∞ Price: Rp${Number(event.price).toLocaleString()}\n`;
      eventsMessage += `   ‚è∞ Duration: ${event.duration}\n`;
      eventsMessage += `   üë• Min. Guests: ${event.minGuests} people\n`;
      if (event.description) {
        eventsMessage += `   üìù ${event.description.substring(0, 80)}${event.description.length > 80 ? '...' : ''}\n`;
      }
      eventsMessage += `\n`;
    });

    eventsMessage += `üìû To book any event, visit our website or contact us!\n`;
    eventsMessage += `üí¨ Send your booking ID for existing reservations.\n`;
    eventsMessage += `üìã Send "help" for more assistance options.`;

    await sendWhatsAppMessage(phoneNumber, eventsMessage);

  } catch (error) {
    logger.error("Error getting current events", error);
    await sendWhatsAppMessage(phoneNumber, 
      "‚ùå Sorry, there was an error retrieving current events. Please try again later or contact our customer service.");
  }
}

// Send event information
async function sendEventInfo(phoneNumber: string) {
  const message = `üéâ *Event Services at Makassar Phinisi Sea Side Hotel*

We offer comprehensive event planning services:

üè¢ *Corporate Events*
‚Ä¢ Business meetings & conferences
‚Ä¢ Product launches & presentations
‚Ä¢ Team building activities
‚Ä¢ Corporate dinners

üíç *Wedding & Celebrations*
‚Ä¢ Wedding receptions
‚Ä¢ Anniversary celebrations
‚Ä¢ Engagement parties
‚Ä¢ Cultural ceremonies

üéä *Special Occasions*
‚Ä¢ Birthday parties
‚Ä¢ Graduation celebrations
‚Ä¢ Family reunions
‚Ä¢ Holiday events

‚ú® *Premium Features*
‚Ä¢ Professional event planning
‚Ä¢ Catering & menu customization
‚Ä¢ Audio/visual equipment
‚Ä¢ Photography services
‚Ä¢ Scenic waterfront venue
‚Ä¢ Indoor & outdoor options

üìã *How to Book*
1. Visit our website for detailed packages
2. Choose your event type & date
3. Customize your requirements
4. Complete booking & payment

üì± *Quick Commands*
‚Ä¢ Send "current events" to see available packages
‚Ä¢ Send your booking ID to check status
‚Ä¢ Send "help" for more assistance

Ready to create unforgettable memories? Contact us today! üåü`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send general help information (UNUSED - replaced by sendWelcomeMenu)
// async function sendGeneralHelp(phoneNumber: string) {
  const message = `üëã *Welcome to Makassar Phinisi Sea Side Hotel*
Your 24/7 Digital Assistant ü§ñ

üîç *Booking Services*
‚Ä¢ Send your booking ID (e.g., BK-ABC123) to check status
‚Ä¢ Get real-time booking information
‚Ä¢ Track payment approval status

ÔøΩ *Event Information*
‚Ä¢ Send "current events" to see available packages
‚Ä¢ Send "event" for detailed event services
‚Ä¢ View pricing, duration & guest capacity

ÔøΩ *Payment Assistance*
‚Ä¢ Send "payment" for payment help
‚Ä¢ Learn about payment methods
‚Ä¢ Check payment approval process

ÔøΩ *Quick Commands*
‚Ä¢ "booking" ‚Üí Booking assistance
‚Ä¢ "current events" ‚Üí See available event packages
‚Ä¢ "payment" ‚Üí Payment information
‚Ä¢ "event" ‚Üí Event services overview
‚Ä¢ "help" ‚Üí This menu

üéØ *Smart Features*
‚Ä¢ Just send your booking ID anywhere in a message
‚Ä¢ Ask questions in English or Indonesian
‚Ä¢ Get instant responses 24/7

üìû *Need Human Help?*
For complex inquiries, contact our customer service team directly.

üí° *Tip:* Your booking ID is in your email confirmation. Keep it handy for quick status checks!

How can I assist you today? üòä`;

  await sendWhatsAppMessage(phoneNumber, message);
}

// Send WhatsApp message via WhatsApp Business API
async function sendWhatsAppMessage(phoneNumber: string, message: string) {
  try {
    const WHATSAPP_TOKEN = process.env.WHATSAPP_ACCESS_TOKEN;
    const PHONE_NUMBER_ID = process.env.WHATSAPP_PHONE_NUMBER_ID;

    if (!WHATSAPP_TOKEN || !PHONE_NUMBER_ID) {
      logger.error("WhatsApp credentials not configured");
      return;
    }

    const url = `https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`;
    
    const payload = {
      messaging_product: "whatsapp",
      to: phoneNumber,
      type: "text",
      text: {
        body: message
      }
    };

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${WHATSAPP_TOKEN}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error("Failed to send WhatsApp message", {
        status: response.status,
        error: errorText,
      });
    } else {
      logger.info("WhatsApp message sent successfully", {
        to: phoneNumber,
        messageLength: message.length,
      });
    }
  } catch (error) {
    logger.error("Error sending WhatsApp message", error);
  }
}
